/*
standardDefs.h
This file is meant to contain things that are used across multiple executables that don't change
*/

#ifndef STANDARD_DEFS_H
#define STANDARD_DEFS_H

#include <math.h>

//12 meters - set to this because simulator makes 11 meter jumps
#define COLLISION_THRESHOLD 12 //meters
#define CONFLICT_THRESHOLD 24 //meters

/*UAV SPECIFIC DEFINES*/
//25 mph = 11.17600 meters / second
#define MPS_SPEED 11.176 
#define MPH_SPEED 25
#define RHO 15/(22.5*(M_PI/180.0))

/*
Many defines for simulator calculations
*/
#define EARTH_RADIUS 6371000 //meters
#define WEST_MOST_LONGITUDE (-85.490356)	// defines the field location on Earth
#define NORTH_MOST_LATITUDE 32.606573
#define EAST_MOST_LONGITUDE_500M (-85.485018)
#define SOUTH_MOST_LATITUDE_500M 32.6020766
#define EAST_MOST_LONGITUDE_1000M (-85.47968)
#define SOUTH_MOST_LATITUDE_1000M 32.5975802

//latitude and longitude epsilons (~10% of actual distance difference)
#define LONGITUDE_EPSILON (EAST_MOST_LONGITUDE_500M-WEST_MOST_LONGITUDE)/10
#define LATITUDE_EPSILON (NORTH_MOST_LATITUDE-SOUTH_MOST_LATITUDE_500M)/10

//pi radians = 180 degrees
#define DEGREES_TO_RADIANS (M_PI/180.0)
#define RADIANS_TO_DEGREES (180.0/M_PI)

//1 degree latitude ~= 111.2 km
#define LATITUDE_TO_METERS (111200.0)
#define METERS_TO_LATITUDE (1.0/111200.0)


namespace AU_UAV_ROS
{
	//Here's our standard waypoint definition
	struct waypoint
	{
		double latitude;
		double longitude;
		double altitude;
	};
	
	struct flockVariables
	{
		int clusterDistance;
		int flockTime;
	};
	
	struct forceVariables
	{
		double maxForce;				// maximum force imposed by one plane on another, except when they are in conflict radius
		// alpha and beta are parameters that define the bivariate normal potential field
		double alpha;
		double beta;
		// these variables define the limits of the independent/swarm leader force function
		double gamma;
		double alphaTop;
		double betaTop;
		double alphaBot;
		double betaBot;

		// these variables define the limits of the swarm follower force function
		double alphaTopF;
		double betaTopF;
		double alphaBotF;
		double betaBotF;
	};
}

/*
isBlankLine(...)
simple function for parsing to determine is a string is a "blank" line
*/
bool isBlankLine(char str[]);

/*
isValidYesNo(...)
returns true if the character is a 'y', 'Y', 'n', or 'N'
*/
bool isValidYesNo(char c);

/*
distanceBetween(...)
Returns the distance in meters between the two waypoints provided.  Note that it does take into account
the earth's curvature.
*/
double distanceBetween(struct AU_UAV_ROS::waypoint first, struct AU_UAV_ROS::waypoint second);

#endif
